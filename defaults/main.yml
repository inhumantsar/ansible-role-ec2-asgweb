---
asgweb_service_env: 'dev'
asgweb_service_state: 'present'

vpc_cidr: '10.1.0.0/16'
vpc_region: 'us-east-1'
vpc_id: ''                        # must be set when manage_vpc == false
elb_subnets: []                   #            ^ ditto ^
asg_subnets: []                   #            ^ ditto ^

ec2_cluster_name: 'asgwebtest'
ec2_ami: 'ami-a4c7edb2'            # Amazon Linux 2017.03.1.20170623 in us-east-1
ec2_instance_type: 't2.micro'
ec2_assign_public_ip: 'no'
ec2_host_port: 80                  # mostly used to inform defaults
# ec2_instance_profile_name: ''    # left undef so default(omit) can work

manage_ec2_keypair: true           # set to false to prevent create/delete of key
ec2_key_name: 'asgwebtest'

asg_health_check_period: 60        # GRACE period.
asg_health_check_timeout: 300
asg_health_check_type: 'EC2'
asg_max_size: 1
asg_min_size: 1
asg_desired_capacity: 1

# manage_hours sets up scheduled tasks to power down the cluster
# outside of the hours set here. (power down == (set desired capacity = 0))
asg_manage_hours: true
asg_hours_startup_cron: '0 14 * * MON-FRI'
asg_hours_shutdown_cron: '0 2 * * TUE-SAT'

# note that these certs are stored in IAM
manage_elb: true
manage_cert: true                 # creates a new ssl certificate for the elb if true
elb_cert_domain: 'example.com'    # common name, used only when generating certs
elb_cert_arn: ''                  # must be set if manage_cert == false
elb_host_port: '{{ec2_host_port}}'
elb_name_list: []

elb_listeners:
  - protocol: http
    load_balancer_port: 80
    instance_port: "{{ elb_host_port }}"
    proxy_protocol: True
  - protocol: https
    load_balancer_port: 443
    instance_protocol: http
    instance_port: "{{ elb_host_port }}"
    ssl_certificate_id: "{{ elb_cert_arn }}"

# set `asg_health_check_type` = 'ELB' and set a var like this
elb_health_check:
  ping_protocol: tcp
  ping_port: 22
  # ping_protocol: http
  # ping_port: '{{ec2_host_port}}'
  # ping_path: "/"    # only required for http/https
  response_timeout: 5
  interval: 10
  unhealthy_threshold: 10
  healthy_threshold: 2

# security group rules
instance_sg_rules:
  - proto: tcp
    from_port: '{{ec2_host_port}}'
    to_port:  '{{ec2_host_port}}'
    cidr_ip: '{{vpc_cidr}}'
  - proto: tcp
    from_port: 22
    to_port: 22
    cidr_ip: '{{vpc_cidr}}'
