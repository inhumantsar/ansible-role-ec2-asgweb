---
# commissioning block
- block:
  - name: Create instance security group
    local_action:
      module: ec2_group
      name: "{{ ec2_cluster_name }}_{{ service_env }}_instances"
      vpc_id: "{{ vpc_id | default(omit) }}"
      region: "{{vpc_region }}"
      rules: "{{ instance_sg_rules }}"
      description: "some desc"
    register: sg

  - debug: var=sg
  - name: Store security group ID
    set_fact:
      instance_sg_id: "{{ sg.group_id }}"

  - name: Create EC2 keypair if it doesn't already exist
    local_action:
      module: ec2_key
      name: "{{ ec2_key_name }}"
      region: "{{ vpc_region }}"
    when: "manage_ec2_keypair == true"

  - name: Give AWS a few seconds to full register the new keypair
    pause: seconds=10

  - name: Create launch config
    local_action:
      module: ec2_lc
      name: "{{ ec2_cluster_name }}_{{ service_env }}"
      image_id: "{{ ec2_ami }}"
      key_name: "{{ ec2_key_name }}"
      region: "{{ vpc_region }}"
      security_groups: "{{ instance_sg_id }}"
      instance_type: "{{ ec2_instance_type }}"
      assign_public_ip: "{{ ec2_assign_public_ip }}"
      instance_profile_name: "{{ ec2_instance_profile_name | default(omit) }}"
    register: lc

  - name: Generate self-signed certificate
    include_role:
      name: jdauphant.ssl-certs
    when: manage_cert

  - name: Create SSL certificate
    local_action:
      module: iam_cert
      name: "{{ ec2_cluster_name }}_{{ service_env }}"
      cert: "/tmp/{{elb_cert_domain}}.pem"
      key: "/tmp/{{elb_cert_domain}}.key"
      # cert_chain: "/tmp/{{elb_cert_domain}}"
      state: present
    when: manage_cert

  - name: give aws a little time to register this cert
    pause: seconds=30

  # dirty hack to get the active account id so we can build a correct cert ARN.
  # TODO: once ansible 2.4 is out, this http://docs.ansible.com/ansible/iam_cert_facts_module.html
  - name: Install boto3 (it'll be a dep of the ansible modules soon enough anyway)
    pip: name=boto3

  - name: Shell out to aws cli to get the account id
    shell: python -c "import boto3; print(boto3.client('sts').get_caller_identity().get('Account'))"
    register: aws_account_id
  ###

  - name: Build cert arn
    set_fact:
      elb_cert_arn: "arn:aws:iam::{{ aws_account_id.stdout }}:server-certificate/{{ ec2_cluster_name }}_{{ service_env }}"
    when: manage_cert

  - name: create load balancer
    local_action:
      module: ec2_elb_lb
      name: "{{ ec2_cluster_name }}-{{ service_env }}" # ELBs can't have underscores
      region: "{{ vpc_region }}"
      subnets: "{{ elb_subnets }}"
      state: present
      health_check: "{{ elb_health_check|default(omit) }}"
      listeners: "{{ elb_listeners }}"
      security_group_ids: "{{ instance_sg_id }}"
    register: lb
    when: manage_elb

  # - debug: var=lb
  - name: Set ELB list when ELB is managed
    set_fact:
      elb_name_list: ["{{ ec2_cluster_name }}-{{ service_env }}"]
    when: manage_elb


  - name: Create autoscaling group
    local_action:
      module: ec2_asg
      name: "{{ ec2_cluster_name }}_{{ service_env }}"
      launch_config_name: "{{ ec2_cluster_name }}_{{ service_env }}"
      health_check_period: "{{ asg_health_check_period }}" # GRACE period.
      health_check_type: "{{ asg_health_check_type }}"
      replace_all_instances: yes
      max_size: "{{ asg_max_size }}"
      min_size: "{{ asg_min_size }}"
      load_balancers: "{{elb_name_list}}"
      desired_capacity: "{{ asg_desired_capacity }}"
      region: "{{ vpc_region }}"
      vpc_zone_identifier: "{{ asg_subnets }}"
      wait_timeout: "{{ asg_health_check_timeout }}"
    register: asg

  - name: Get start date for asg startup task
    shell: date -d '+5 minutes' '+%s'
    register: asg_hours_startup_start_time

  - name: Get start date for asg shutdown task
    shell: date -d '+6 minutes' '+%s'
    register: asg_hours_shutdown_start_time

  - name: Get end date for asg startup task
    shell: date -d '+1 year' '+%s'
    register: asg_hours_startup_end_time

  - name: Get end date for asg shutdown task
    shell: date -d '+1 year 1 minute' '+%s'
    register: asg_hours_shutdown_end_time

  - name: Create startup task for asg
    local_action:
      module: ec2_asg_scheduled_action
      region: "{{ vpc_region }}"
      autoscaling_group_name: "{{ ec2_cluster_name }}_{{ service_env }}"
      scheduled_action_name: "{{ ec2_cluster_name }}_{{ service_env }}_startup"
      recurrence: "{{ asg_hours_startup_cron }}"
      start_time: "{{ asg_hours_startup_start_time.stdout }}"
      end_time: "{{ asg_hours_startup_end_time.stdout }}"
      min_size: "{{ asg_max_size }}"
      max_size: "{{ asg_min_size }}"
      desired_capacity: "{{ asg_desired_capacity }}"

  - name: Create shutdown task for asg
    local_action:
      module: ec2_asg_scheduled_action
      region: "{{ vpc_region }}"
      autoscaling_group_name: "{{ ec2_cluster_name }}_{{ service_env }}"
      scheduled_action_name: "{{ ec2_cluster_name }}_{{ service_env }}_shutdown"
      recurrence: "{{ asg_hours_shutdown_cron }}"
      start_time: "{{ asg_hours_shutdown_start_time.stdout }}"
      end_time: "{{ asg_hours_shutdown_end_time.stdout }}"
      min_size: 0
      max_size: 0
      desired_capacity: 0

  when: "asgweb_service_state != 'absent'"


##########################################
# decommissioning block
- block:
  - name: Delete autoscaling group
    local_action:
      module: ec2_asg
      name: "{{ ec2_cluster_name }}_{{ service_env }}"
      region: "{{ vpc_region }}"
      state: "{{ asgweb_service_state }}"
    register: asg

  - name: Delete load balancer
    local_action:
      module: ec2_elb_lb
      name: "{{ ec2_cluster_name }}-{{ service_env }}" # ELBs can't have underscores
      region: "{{ vpc_region }}"
      state: "{{ asgweb_service_state }}"

  - name: Delete launch config
    local_action:
      module: ec2_lc
      name: "{{ ec2_cluster_name }}_{{ service_env }}"
      region: "{{ vpc_region }}"
      image_id: "{{ ec2_ami }}"
      state: "{{ asgweb_service_state }}"

  - name: Delete EC2 keypair
    local_action:
      module: ec2_key
      name: "{{ ec2_key_name }}"
      region: "{{ vpc_region }}"
      state: "{{ asgweb_service_state }}"
    when: manage_ec2_keypair

  - name: Delete SSL certificate
    local_action:
      module: iam_cert
      name: "{{ ec2_cluster_name }}_{{ service_env }}"
      state: absent
    when: manage_cert

  - name: Delete instance security group
    local_action:
      module: ec2_group
      name: "{{ ec2_cluster_name }}_{{ service_env }}_instances"
      region: "{{ vpc_region }}"
      state: "{{ asgweb_service_state }}"

  when: "asgweb_service_state == 'absent'"
